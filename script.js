const fs = require('fs');
const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');


const reminderKeys = {
  reply_markup: JSON.stringify({
    keyboard: [
      [{ text: '–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' }],
      [{ text: '–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π' }],
      [{ text: '–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' }],
      [{ text: '–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞' }]
    ],
    one_time_keyboard: true
  })
};

const ReminderCreation = require('./reminderCreation'); /* –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ */
const ReminderList = require('./reminderList'); /* –°–ø–∏—Å–æ–∫ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π */
const ReminderDeletion = require('./reminderDeletion');  /* –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π */
let creationSessions = {};
let deletionSessions = {};

// replace with your token
const bot = new TelegramBot('<YOU API TELEGRAM BOT>', {polling: true});

let reminders = JSON.parse(fs.readFileSync('reminders.json'));


const weekdays = {
  "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 1,
  "–í—Ç–æ—Ä–Ω–∏–∫": 2,
  "–°—Ä–µ–¥–∞": 3,
  "–ß–µ—Ç–≤–µ—Ä–≥": 4,
  "–ü—è—Ç–Ω–∏—Ü–∞": 5,
  "–°—É–±–±–æ—Ç–∞": 6,
  "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 0
};


bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reminderKeys);
});

bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
   if (creationSessions[chatId]) {
        const session = creationSessions[chatId];
        session.handleAnswer(text);

        if (session.isFinished()) {
            reminders.push(session.getReminder());
            fs.writeFileSync('reminders.json', JSON.stringify(reminders));
            bot.sendMessage(msg.chat.id, 'üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b> üîî', {parse_mode:"HTML"});
            delete creationSessions[chatId];
            bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reminderKeys);
        } else {
            session.askQuestion(bot, chatId);
        }

    } else {
      switch(text) {
        case '–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ':
            creationSessions[chatId] = new ReminderCreation();
            creationSessions[chatId].askQuestion(bot, chatId);
          break;
        case '–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π':
           reminders = JSON.parse(fs.readFileSync('reminders.json'));
           ReminderList.list(bot, chatId, reminders);
           bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reminderKeys);
          break;
        case '–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞':
             let now = new Date();
             let formattedTime = formatTime(now.getHours(), now.getMinutes());
             let formattedDate = formatDate(now.getDate(), now.getMonth()+1, now.getFullYear());
             bot.sendMessage(msg.chat.id, `–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${formattedTime} ${formattedDate}`);
          break;
        case '–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ':
         reminders = JSON.parse(fs.readFileSync('reminders.json'));
            deletionSessions[chatId] = new ReminderDeletion();
            if (!deletionSessions[chatId].listReminders(bot, chatId, reminders)) {
              delete deletionSessions[chatId];
               bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reminderKeys);
            }
            break;
      }
  }
});

bot.on('callback_query', (callbackQuery) => {
    const msg = callbackQuery.message;
    const data = callbackQuery.data;
    const chatId = msg.chat.id;

    // If the user is in the process of deleting a reminder
    if (deletionSessions[chatId]) {
        const session = deletionSessions[chatId];
        if (data === 'yes' || data === 'no') {
            const reminderToDelete = session.handleAnswer(data);
            if (reminderToDelete) {
                reminders = reminders.filter(reminder => reminder !== reminderToDelete);
                fs.writeFileSync('reminders.json', JSON.stringify(reminders));
                bot.sendMessage(chatId, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.');
            } else {
                bot.sendMessage(chatId, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            }
            delete deletionSessions[chatId];
        } else {
            session.confirmDeletion(bot, chatId, reminders[Number(data)]);
        }
    } else {
        switch(data) {
            case 'delete':
                deletionSessions[chatId] = new ReminderDeletion();
                if (!deletionSessions[chatId].listReminders(bot, chatId, reminders)) {
                    delete deletionSessions[chatId];
                }
                break;
        }
    }
});


const checkAndSendReminder = (reminder) => {
  let now = new Date();
  let dayNames = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
  reminders = JSON.parse(fs.readFileSync('reminders.json'));

  let currentDay = dayNames[now.getDay()];
  let currentTime = formatTime(now.getHours(), now.getMinutes());

  if (reminder.isRegular) {
    if (reminder.dayOrDate === currentDay && reminder.time === currentTime) {
      bot.sendMessage(reminder.chatId, `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminder.text}`);
    }
  } else {
    let reminderDate = new Date(reminder.dayOrDate.split('.').reverse().join('-') + 'T' + reminder.time + ':00');

    if (reminderDate.toISOString().slice(0, 10) === now.toISOString().slice(0, 10) && reminder.time === currentTime) {
      bot.sendMessage(reminder.chatId, `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${reminder.text}`);
      // remove reminder from the list and write the changes to the file
      reminders = reminders.filter((item) => item !== reminder);
      fs.writeFileSync('reminders.json', JSON.stringify(reminders));
    } else {
      // checking for notifications 24 hours, 1 hour, and 10 minutes before the reminder
      if (reminder.notify24h && (now.getTime() - reminderDate.getTime()) === 24*60*60*1000) {
        bot.sendMessage(reminder.chatId, `üõéÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: '${reminder.text}' –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.`);
      } else if (reminder.notify1h && (now.getTime() - reminderDate.getTime()) === 60*60*1000) {
        bot.sendMessage(reminder.chatId, `üõéÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: '${reminder.text}' –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 1 —á–∞—Å.`);
      } else if (reminder.notify10m && (now.getTime() - reminderDate.getTime()) === 10*60*1000) {
        bot.sendMessage(reminder.chatId, `üõéÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: '${reminder.text}' –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.`);
      }
    }
  }
}

const formatTime = (hours, minutes) => {
  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
}

const formatDate = (day, month, year) => {
  return `${day.toString().padStart(2, '0')}.${month.toString().padStart(2, '0')}.${year}`;
}

// check and send reminders every minute
cron.schedule('* * * * *', () => {
  reminders.forEach(checkAndSendReminder);
});
